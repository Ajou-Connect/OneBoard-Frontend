{"version":3,"file":"main.c8b535f756279883ddf9.hot-update.js","sources":["/mnt/e/sw_capstone/frontend/src/zoomtest/TestZoom.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useContext,\n  useState,\n  useCallback,\n  useReducer,\n} from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ZoomVideo, { ConnectionState } from \"@zoom/videosdk\";\nimport { message, Modal } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport produce from \"immer\";\nimport Home from \"../ZoomSample/feature/home/home\";\nimport Video from \"../ZoomSample/feature/video/video\";\nimport VideoSingle from '../ZoomSample/feature/video/video-single';\nimport Preview from \"../ZoomSample/feature/preview/preview\";\nimport ZoomContext from \"../ZoomSample/context/zoom-context\";\nimport ZoomMediaContext from \"../ZoomSample/context/media-context\";\nimport ChatContext from \"../ZoomSample/context/chat-context\";\nimport LoadingLayer from \"../ZoomSample/component/loading-layer\";\nimport Chat from \"../ZoomSample/feature/chat/chat\";\nimport { ChatClient, MediaStream } from \"../index-types\";\nimport \"./test.css\";\nimport { generateVideoToken } from \"../ZoomSample/utils/util\";\n\n\nconst mediaShape = {\n  audio: {\n    encode: false,\n    decode: false,\n  },\n  video: {\n    encode: false,\n    decode: false,\n  },\n  share: {\n    encode: false,\n    decode: false,\n  },\n};\nconst mediaReducer = produce((draft, action) => {\n  switch (action.type) {\n    case \"audio-encode\": {\n      draft.audio.encode = action.payload;\n      break;\n    }\n    case \"audio-decode\": {\n      draft.audio.decode = action.payload;\n      break;\n    }\n    case \"video-encode\": {\n      draft.video.encode = action.payload;\n      break;\n    }\n    case \"video-decode\": {\n      draft.video.decode = action.payload;\n      break;\n    }\n    case \"share-encode\": {\n      draft.share.encode = action.payload;\n      break;\n    }\n    case \"share-decode\": {\n      draft.share.decode = action.payload;\n      break;\n    }\n    default:\n      break;\n  }\n}, mediaShape);\n\ninterface TestProps {\n  match: {\n    params: {\n      lectureId: string,\n      lessonId: string,\n      sessionId: string\n    }\n  }\n}\n\nfunction TestZoom(props: TestProps) {\n  const [loading, setIsLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState(\"\");\n  const [isFailover, setIsFailover] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>(\"closed\");\n  const [mediaState, dispatch] = useReducer(mediaReducer, mediaShape);\n  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);\n  const [chatClient, setChatClient] = useState<ChatClient | null>(null);\n  const [isSupportGalleryView, setIsSupportGalleryView] = useState<boolean>(true);\n  const zmClient = useContext(ZoomContext);\n  const user = JSON.parse(sessionStorage.userInfo);\n  const userName = user.name;\n  const sessionId = props.match.params.sessionId;\n  const lectureId = props.match.params.lectureId;\n  const lessonId = props.match.params.lessonId;\n  const token = generateVideoToken(\n    \"MoRylmD2jBq9NfbZXbSVmvZcGYOFkDCeJc3e\",\n    \"NewabYwGXIFrOlPRf4dZBKeqFECESIkdlLrq\",\n    sessionId,\n    \"\",\n    \"\",\n    \"\"\n      ); \n  useEffect(() => {\n    const init = async () => {\n      await zmClient.init(\"en-US\", `${window.location.origin}/lib`, 'zoom.us');\n      try {\n        setLoadingText(\"Joining the session...\");\n        await zmClient.join(sessionId, token, userName, \"\");\n        const stream = zmClient.getMediaStream();\n        setMediaStream(stream);\n\t      setIsSupportGalleryView(stream.isSupportMultipleVideos());\n        const chatClient = zmClient.getChatClient();\n        setChatClient(chatClient);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n       \n      }\n    };\n    init();\n    return () => {\n      ZoomVideo.destroyClient();\n    };\n  }, [zmClient]);\n  const onConnectionChange = useCallback(\n    (payload) => {\n      if (payload.state === ConnectionState.Reconnecting) {\n        setIsLoading(true);\n        setIsFailover(true);\n        setStatus(\"connecting\");\n        const { reason } = payload;\n        if (reason === \"failover\") {\n          setLoadingText(\"Session Disconnected,Try to reconnect\");\n        }\n      } else if (payload.state === ConnectionState.Connected) {\n        setStatus(\"connected\");\n        if (isFailover) {\n          setIsLoading(false);\n        }\n      } else if (payload.state === ConnectionState.Closed) {\n        setStatus(\"closed\");\n        if (payload.reason === \"ended by host\") {\n          Modal.warning({\n            title: \"Meeting ended\",\n            content: \"This meeting has been ended by host\",\n          });\n        }\n      }\n    },\n    [isFailover]\n  );\n  const onMediaSDKChange = useCallback((payload) => {\n    const { action, type, result } = payload;\n    dispatch({ type: `${type}-${action}`, payload: result === \"success\" });\n  }, []);\n  const onLeaveOrJoinSession = useCallback(async () => {\n    if (status === \"closed\") {\n      setIsLoading(true);\n      await zmClient.join(sessionId, token, userName, \"\");\n      setIsLoading(false);\n    } else if (status === \"connected\") {\n      await zmClient.leave();\n      message.warn(\"You have left the session.\");\n    }\n  }, [zmClient, status]);\n  useEffect(() => {\n    zmClient.on(\"connection-change\", onConnectionChange);\n    zmClient.on(\"media-sdk-change\", onMediaSDKChange);\n    return () => {\n      zmClient.off(\"connection-change\", onConnectionChange);\n      zmClient.off(\"media-sdk-change\", onMediaSDKChange);\n    };\n  }, [zmClient, onConnectionChange, onMediaSDKChange]);\n  return (\n    <div className=\"App\">\n      {loading && <LoadingLayer content={loadingText} />}\n      {!loading && (\n        <ZoomMediaContext.Provider value={{ ...mediaState, mediaStream }}>\n          <ChatContext.Provider value={chatClient}>\n            <Router>\n              <Switch>\n                <Route\n                  path={`/class/${lectureId}/${lessonId}/${sessionId}`}\n                  render={(props) => (\n                    <Home\n                      {...props}\n                      status={status}\n                      onLeaveOrJoinSession={onLeaveOrJoinSession}\n                    />\n                  )}\n                  exact\n                />\n                <Route\n                  path=\"/index.html\"\n                  render={(props) => (\n                    <Home\n                      {...props}\n                      status={status}\n                      onLeaveOrJoinSession={onLeaveOrJoinSession}\n                    />\n                  )}\n                  exact\n                />\n                <Route\n                  path=\"/preview\"\n                  component={Preview}\n                />\n                <Route path=\"/video\" component={isSupportGalleryView ? Video : VideoSingle} />\n                <Route path=\"/chat\" component={Chat} />\n              </Switch>\n            </Router>\n          </ChatContext.Provider>\n        </ZoomMediaContext.Provider>\n      )}\n    </div>\n  );\n}\n\nexport default TestZoom;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AA1BA;AA4BA;AACA;AAWA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AATA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AATA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AA0CA;AACA;AA1IA;AACA;AADA;AA2IA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}