{"version":3,"file":"main.f1bbd3c9a0bf293300c8.hot-update.js","sources":["/mnt/f/SW_Capstone/frontend/src/ZoomSample/feature/video/video.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ZoomContext from '../../context/zoom-context';\nimport ZoomMediaContext from '../../context/media-context';\nimport Avatar from './components/avatar';\nimport VideoFooter from \"./components/video-footer\";\nimport Pagination from './components/pagination';\nimport { useCanvasDimension } from './hooks/useCanvasDimension';\nimport { useGalleryLayout } from './hooks/useGalleryLayout';\nimport { usePagination } from './hooks/usePagination';\nimport { useActiveVideo } from './hooks/useAvtiveVideo';\nimport { useShare } from './hooks/useShare';\nimport './video.scss';\nimport { isSupportWebCodecs } from '../../utils/platform';\nimport Chat from \"../chat/chat\";\nimport axios from \"axios\";\nimport { Button } from \"antd\";\nimport styled from 'styled-components';\nimport io from \"socket.io-client\";\nimport QuizModal from './QuizModal';\nimport UnderStandModal from './UnderStandModal';\n\nconst AttendanceBtn = styled.button`\n  color: red;\n`;\n\ninterface VideoProps extends RouteComponentProps {\n  lectureId: string;\n  lessonId: string; \n  sessionId: string;\n}\n\nconst VideoContainer: React.FunctionComponent<VideoProps> = (props) => {\n  const { history, lectureId, lessonId, sessionId } = props;\n  const zmClient = useContext(ZoomContext);\n  const {\n    mediaStream,\n    video: { decode: isVideoDecodeReady },\n  } = useContext(ZoomMediaContext);\n  const videoRef = useRef<HTMLCanvasElement | null>(null);\n  const shareRef = useRef<HTMLCanvasElement | null>(null);\n  const selfShareRef = useRef<HTMLCanvasElement & HTMLVideoElement | null>(null);\n  const shareContainerRef = useRef<HTMLDivElement | null>(null);\n  const canvasDimension = useCanvasDimension(mediaStream, videoRef);\n  const activeVideo = useActiveVideo(zmClient);\n  const user = JSON.parse(localStorage.userInfo);\n  const userType: string = user.userType;\n  const token = localStorage.getItem(\"token\");\n  const [modalVisible, setModalVisible] = useState<boolean>(false);\n  const [understandId, setUnderstandId] = useState<any>();\n  const [isUnderstand, setIsUnderstand] = useState<boolean>(false);\n  const { page, pageSize, totalPage, totalSize, setPage } = usePagination(\n    zmClient,\n    canvasDimension,\n  );\n  const { visibleParticipants, layout: videoLayout } = useGalleryLayout(\n    zmClient,\n    mediaStream,\n    isVideoDecodeReady,\n    videoRef,\n    canvasDimension,\n    {\n      page,\n      pageSize,\n      totalPage,\n      totalSize,\n    },\n  );\n  const { isRecieveSharing, isStartedShare, sharedContentDimension } = useShare(\n    zmClient,\n    mediaStream,\n    shareRef,\n  );\n  const isSharing = isRecieveSharing || isStartedShare;\n  const contentDimension = sharedContentDimension;\n  const socket = io.connect(\"https://oneboard.connect.o-r.kr:8070\");\n  if (isSharing && shareContainerRef.current) {\n    const { width, height } = sharedContentDimension;\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = shareContainerRef.current.getBoundingClientRect();\n    const ratio = Math.min(containerWidth / width, containerHeight / height, 1);\n    contentDimension.width = Math.floor(width * ratio);\n    contentDimension.height = Math.floor(height * ratio);\n  }\n\n\n\n  useEffect(() => {\n    socket.emit(\"init\", {\n      \"userType\": userType,\n      \"room\": sessionId\n    });\n\n    socket.on(\"attendance request\", (data: any) => {\n      alert(\"출석 확인\");\n      axios.get(`/lecture/${lectureId}/lesson/${lessonId}/live/attendance/student`, { params: { \"session\": `${sessionId}` }, headers: { \"X-AUTH-TOKEN\": `${token}` } })\n        .then((res) => {\n          console.log(res);\n          const result = res.data.result;\n          if (result === \"SUCCESS\") {\n            console.log(\"hi\");\n          }\n          else {\n            console.log(\"error\");\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        })\n    }\n    )\n    // understand\n      socket.on(\"understanding request\", (data: any) => {\n        setIsUnderstand(true);\n        setModalVisible(true);\n  })\n  \n  \n  \n  }, [])\n  \n\n\n  \n  \n  const checkAttendance = (e: any) => {\n    // e.preventDefault(); \n    axios.get(`/lecture/${lectureId}/lesson/${lessonId}/live/attendance/professor`, { params: { session: `${sessionId}` } })\n      .then((res) => {\n        alert(\"학생들에게 출석요청을 보냈습니다.\")\n        console.log(res);\n      })\n      .catch(e => {\n        console.log(e);\n      })\n  }\n\n  const checkUnderstand = () => {\n    axios.get(`/lecture/${lectureId}/lesson/${lessonId}/live/understanding/professor`, { params: { session: `${sessionId}` } })\n      .then((res) => {\n        alert(\"학생들에게 이해도 평가요청을 보냈습니다.\");\n        console.log(res.data.data.understandId);\n        const result = res.data.data;\n        setUnderstandId(result.understandId);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n\n  const openModal = () => {\n    setModalVisible(true)\n  }\n  const closeModal = () => {\n    setModalVisible(false)\n  }\n    \n    \n\n  return (\n    <div className=\"viewport\">\n      <div\n        className={classnames('share-container', {\n          'in-sharing': isSharing,\n        })}\n        ref={shareContainerRef}\n      >\n        <div\n          className=\"share-container-viewport\"\n          style={{\n            width: `${contentDimension.width}px`,\n            height: `${contentDimension.height}px`,\n          }}\n        >\n          <canvas\n            className={classnames('share-canvas', { hidden: isStartedShare })}\n            ref={shareRef}\n          />\n          {isSupportWebCodecs() ? <video\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          /> : <canvas\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />}\n        </div>\n      </div>\n      <div\n        className={classnames('video-container', {\n          'in-sharing': isSharing,\n        })}\n      >\n        <canvas\n          className=\"video-canvas\"\n          id=\"video-canvas\"\n          width=\"800\"\n          height=\"600\"\n          ref={videoRef}\n        />\n        <ul className=\"avatar-list\">\n          {visibleParticipants.map((user, index) => {\n            if (index > videoLayout.length - 1) {\n              return null;\n            }\n            const dimension = videoLayout[index];\n            const { width, height, x, y } = dimension;\n            const { height: canvasHeight } = canvasDimension;\n            return (\n              <Avatar\n                participant={user}\n                key={user.userId}\n                isActive={activeVideo === user.userId}\n                style={{\n                  width: `${width}px`,\n                  height: `${height}px`,\n                  top: `${canvasHeight - y - height}px`,\n                  left: `${x}px`,\n                }}\n              />\n            );\n          })}\n        </ul>\n      </div>\n      <VideoFooter className=\"video-operations\" sharing shareRef={selfShareRef} lectureId={props.lectureId} lessonId={props.lessonId} sessionId={props.sessionId} />\n      {totalPage > 1 && (\n        <Pagination\n          page={page}\n          totalPage={totalPage}\n          setPage={setPage}\n          inSharing={isSharing}\n        />\n      )}\n      {userType === \"T\" ? (<div>\n        <AttendanceBtn onClick={checkUnderstand}>이해도 확인 요청</AttendanceBtn>\n        <AttendanceBtn onClick={checkAttendance}>출석요청</AttendanceBtn>\n        <AttendanceBtn onClick={openModal}>퀴즈출제</AttendanceBtn>\n        {\n          modalVisible && <QuizModal\n            visible={modalVisible}\n            closable={true}\n            maskClosable={true}\n            onClose={closeModal}\n            lessonId={props.lessonId}\n            lectureId={props.lectureId}\n            sessionId={props.sessionId}\n            className=\"modal-root\">퀴즈 출제</QuizModal>\n        }\n      </div>) : (isUnderstand ? (\n          <div>\n            {\n          modalVisible && <UnderStandModal\n            visible={modalVisible}\n            closable={true}\n            maskClosable={true}\n            onClose={closeModal}\n            lessonId={props.lessonId}\n            lectureId={props.lectureId}\n            sessionId={props.sessionId}\n            understandId={understandId}\n            className=\"modal-under\">이해도 체크</UnderStandModal>\n        }\n        </div>) : (<div></div>))}\n      <Chat/>\n    </div>\n  );\n};\n\nexport default VideoContainer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AACA;AASA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAYA;AArBA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAtGA;AAAA;AAAA;AAAA;AAAA;AAyGA;AACA;AA7OA;AAWA;;;AAXA;AA8OA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}