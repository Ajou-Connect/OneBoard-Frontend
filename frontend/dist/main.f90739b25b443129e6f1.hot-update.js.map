{"version":3,"file":"main.f90739b25b443129e6f1.hot-update.js","sources":["/mnt/f/SW_Capstone/frontend/src/ZoomSample/feature/video/video-single.tsx"],"sourcesContent":["import React, {\n  useContext,\n  useRef,\n  useState,\n  useCallback,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { VideoQuality, VideoActiveState } from '@zoom/videosdk';\nimport classnames from 'classnames';\nimport ZoomContext from '../../context/zoom-context';\nimport ZoomMediaContext from '../../context/media-context';\nimport Avatar from './components/avatar';\nimport VideoFooter from './components/video-footer';\nimport { useShare } from './hooks/useShare';\nimport { useParticipantsChange } from './hooks/useParticipantsChange';\nimport { useCanvasDimension } from './hooks/useCanvasDimension';\nimport { usePrevious, useMount } from '../../hooks';\nimport { Participant } from '../../../index-types';\nimport './video.scss';\n\ninterface VideoProps extends RouteComponentProps {\n  lectureId: string;\n  lessonId: string;\n  sessionId: string;\n}\n\nconst VideoContainer: React.FunctionComponent<VideoProps> = (props) => {\n  const { lectureId, lessonId, sessionId } = props;\n  const zmClient = useContext(ZoomContext);\n  const {\n    mediaStream,\n    video: { decode: isVideoDecodeReady },\n  } = useContext(ZoomMediaContext);\n  const videoRef = useRef<HTMLCanvasElement | null>(null);\n  const shareRef = useRef<HTMLCanvasElement | null>(null);\n  const selfShareRef = useRef<HTMLCanvasElement | null>(null);\n  const shareContainerRef = useRef<HTMLDivElement | null>(null);\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [activeVideo, setActiveVideo] = useState<number>(0);\n  const [activeSpeaker, setActiveSpeaker] = useState<number>(0);\n  const canvasDimension = useCanvasDimension(mediaStream, videoRef);\n  const { isRecieveSharing, isStartedShare, sharedContentDimension } = useShare(\n    zmClient,\n    mediaStream,\n    shareRef,\n  );\n  const isSharing = isRecieveSharing || isStartedShare;\n  const contentDimension = sharedContentDimension;\n  if (isSharing && shareContainerRef.current) {\n    const { width, height } = sharedContentDimension;\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = shareContainerRef.current.getBoundingClientRect();\n    const ratio = Math.min(containerWidth / width, containerHeight / height, 1);\n    contentDimension.width = Math.floor(width * ratio);\n    contentDimension.height = Math.floor(height * ratio);\n  }\n  const previousActiveVideo = usePrevious(activeVideo);\n  useParticipantsChange(zmClient, (payload) => {\n    setParticipants(payload);\n  });\n  const onActiveVideoChange = useCallback((payload) => {\n    const { state, userId } = payload;\n    if (state === VideoActiveState.Active) {\n      setActiveVideo(userId);\n    } else if (state === VideoActiveState.Inactive) {\n      setActiveVideo(0);\n    }\n  }, []);\n  const onActiveSpeakerChange = useCallback((payload) => {\n    if (Array.isArray(payload) && payload.length > 0) {\n      const { userId } = payload[0];\n      setActiveSpeaker(userId);\n    }\n  }, []);\n  useEffect(() => {\n    zmClient.on('video-active-change', onActiveVideoChange);\n    zmClient.on('active-speaker', onActiveSpeakerChange);\n    return () => {\n      zmClient.off('video-active-change', onActiveVideoChange);\n      zmClient.off('active-speaker', onActiveSpeakerChange);\n    };\n  }, [zmClient, onActiveVideoChange, onActiveSpeakerChange]);\n\n  const activeUser = useMemo(() => {\n    let user = undefined;\n    if (activeVideo) {\n      user = participants.find((user) => user.userId === activeVideo);\n    } else if (activeSpeaker) {\n      user = participants.find((user) => user.userId === activeSpeaker);\n    } else {\n      user = participants.find((user) => user.isHost);\n    }\n    if (!user) {\n      user = zmClient.getCurrentUserInfo();\n    }\n    return user;\n  }, [activeSpeaker, participants, activeVideo, zmClient]);\n  useEffect(() => {\n    if (mediaStream && videoRef.current && isVideoDecodeReady) {\n      if (activeVideo && previousActiveVideo !== activeVideo) {\n        /**\n         * Can not specify the width and height of the rendered video, also applied to the position of video.\n         * Passing these arguments just for consistency.\n         */\n        mediaStream.renderVideo(\n          videoRef.current,\n          activeVideo,\n          canvasDimension.width,\n          canvasDimension.height,\n          0,\n          0,\n          VideoQuality.Video_360P as any,\n        );\n      } else if (activeVideo === 0 && previousActiveVideo) {\n        mediaStream.stopRenderVideo(videoRef.current, previousActiveVideo);\n      }\n    }\n  }, [\n    mediaStream,\n    activeVideo,\n    previousActiveVideo,\n    isVideoDecodeReady,\n    canvasDimension,\n  ]);\n  useMount(() => {\n    if (mediaStream) {\n      setActiveVideo(mediaStream.getActiveVideoId());\n    }\n  });\n  return (\n    <div className=\"viewport\">\n      <div\n        className={classnames('share-container', {\n          'in-sharing': isSharing,\n        })}\n        ref={shareContainerRef}\n      >\n        <div\n          className=\"share-container-viewport\"\n          style={{\n            width: `${contentDimension.width}px`,\n            height: `${contentDimension.height}px`,\n          }}\n        >\n          <canvas\n            className={classnames('share-canvas', { hidden: isStartedShare })}\n            ref={shareRef}\n          />\n          <canvas\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />\n        </div>\n      </div>\n      <div\n        className={classnames('video-container', {\n          'in-sharing': isSharing,\n        })}\n      >\n        <canvas\n          className=\"video-canvas\"\n          id=\"video-canvas\"\n          width=\"800\"\n          height=\"600\"\n          ref={videoRef}\n        />\n        {activeUser && (\n          <Avatar\n            participant={activeUser}\n            isActive={false}\n            className=\"single-view-avatar\"\n          />\n        )}\n      </div>\n      <VideoFooter className=\"video-operations\" sharing shareRef={selfShareRef} lectureId={props.lectureId} lessonId={props.lessonId} sessionId={props.sessionId}/>\n    </div>\n  );\n};\n\nexport default VideoContainer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;AAAA;AAAA;AAAA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA5CA;AAAA;AAAA;AAAA;AAAA;AA+CA;AACA;AA1JA;AAcA;;;AAdA;AA2JA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}