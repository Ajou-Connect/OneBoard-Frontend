{"version":3,"file":"main.7d6f045740ba14020a24.hot-update.js","sources":["/mnt/f/SW_Capstone/frontend/src/Pages/LecturePages/Lesson/LessonDetail.js","/mnt/f/SW_Capstone/frontend/src/ZoomSample/feature/video/components/video-footer.tsx","/mnt/f/SW_Capstone/frontend/src/ZoomSample/feature/video/video.tsx","/mnt/f/SW_Capstone/frontend/src/zoomtest/TestZoom.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport Iframe from 'react-iframe';\r\nimport Button from '../../../Component/common/Button';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst TTitle = styled.div`\r\n  font-size: 30px;\r\n  margin-left: 15px;\r\n  margin-top: 15px;\r\n  border-bottom: 1px solid #f7f9fc;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  font-style: italic;\r\n  text-align: left;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2.3rem;\r\n  margin-left: 1rem;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TabletrColor = styled.tr`\r\n  &:nth-child(even) {\r\n    background: #f7f9fc;\r\n  }\r\n`;\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nconst LessonDetail = ({ match }) => {\r\n  const lessonId = match.params.lessonId;\r\n  const lectureId = match.params.lectureId;\r\n  const [isProfessor, setIsProfessor] = useState(false);\r\n  const [lessonDetails, setLessonDetails] = useState([]);\r\n  const [studentInfo, setStudentInfo] = useState([]);\r\n  const [sessionId, setSessionId] = useState('');\r\n  const user = JSON.parse(localStorage.userInfo);\r\n  const userType = user.userType;\r\n  const Url = `https://docs.google.com/gview?embedded=true&url=https://115.85.182.194:8080/lecture/${lectureId}/lesson/${lessonId}/note`;\r\n  const FileURL = `https://115.85.182.194:8080/lecture/${lectureId}/lesson/${lessonId}/note`;\r\n  const labels = ['출석', '결석', '지각'];\r\n  const LessonLink = `/class/${lectureId}/${lessonId}/${sessionId}/${userType}`;\r\n  const token = localStorage.getItem('token');\r\n\r\n  const getLessonData = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(`lecture/${lectureId}/lesson/${lessonId}`)\r\n        .then((res) => {\r\n          const result = res.data.data;\r\n          setLessonDetails(result);\r\n          setSessionId(result.session);\r\n          console.log(result);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  const LessonCheck = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(`/lecture/${lectureId}/lesson/${lessonId}/live/entrance`, {\r\n          headers: { 'X-AUTH-TOKEN': `${token}` },\r\n          params: { session: `${sessionId}` },\r\n        })\r\n        .then((res) => {\r\n          const result = res;\r\n          console.log(result);\r\n          if (result.data.result === 'SUCCESS') {\r\n            return (window.location.href = `/class/${lectureId}/${lessonId}/${sessionId}/${userType}`);\r\n          } else {\r\n            alert('수업에 입장할 수 없습니다.');\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  const getLessonAttendanceData = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(`lecture/${lectureId}/lesson/${lessonId}/attendances`)\r\n        .then((res) => {\r\n          const result = res.data.data;\r\n          console.log(result);\r\n          setStudentInfo(result);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  const checkIsProfessor = () => {\r\n    if (userType === 'T') {\r\n      setIsProfessor(true);\r\n    } else setIsProfessor(false);\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: '수업 출석 현황',\r\n      },\r\n    },\r\n  };\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: '학생 수',\r\n        data: [\r\n          studentInfo.filter((ex) => ex.attendanceList[0].status === 2).length,\r\n          studentInfo.filter((ex) => ex.attendanceList[0].status === 0).length,\r\n          studentInfo.filter((ex) => ex.attendanceList[0].status === 1).length,\r\n        ],\r\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLessonData();\r\n    getLessonAttendanceData();\r\n    checkIsProfessor();\r\n    console.log(studentInfo.map((ex, index) => ex.attendanceList.map((ex2, index) => ex2.status)));\r\n  }, []);\r\n\r\n  const onCancel = () => {\r\n    return (window.location.href = `/Main/Lecture/${lectureId}/Lesson`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex' }}>\r\n        <TTitle>{lessonDetails.title}</TTitle>\r\n        <div\r\n          style={{\r\n            fontSize: '1.3rem',\r\n            marginTop: '1.5rem',\r\n            marginRight: '15px',\r\n            marginLeft: '2rem',\r\n          }}\r\n        >\r\n          강의 날짜 : {lessonDetails.date}\r\n        </div>\r\n        <div\r\n          style={{\r\n            fontSize: '1.3rem',\r\n            marginTop: '1.5rem',\r\n            marginRight: '15px',\r\n            marginLeft: '2rem',\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          수업 타입 :\r\n          {lessonDetails.type === 2 ? (\r\n            <div style={{ marginLeft: '15px' }}>대면 수업</div>\r\n          ) : lessonDetails.type === 1 ? (\r\n            <div style={{ marginLeft: '15px' }}>비대면 실시간 수업</div>\r\n          ) : (\r\n            <div style={{ marginLeft: '15px' }}>녹화 강의</div>\r\n          )}\r\n        </div>\r\n        {userType === 'S' ? (\r\n          <div\r\n            style={{\r\n              fontSize: '1.3rem',\r\n              marginTop: '1.5rem',\r\n              marginRight: '50px',\r\n              marginLeft: 'auto',\r\n            }}\r\n          >\r\n            출석 정보\r\n          </div>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n      <hr style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }} />\r\n\r\n      <div style={{ display: 'flex', marginLeft: '1rem' }}>\r\n        <div\r\n          style={{\r\n            fontSize: '1rem',\r\n            paddingBottom: '0.5rem',\r\n            marginBottom: '2rem',\r\n            marginTop: '15px',\r\n            marginRight: '15px',\r\n            fontWeight: 'bold',\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          강의 노트 :{' '}\r\n          {lessonDetails.noteUrl === null ? (\r\n            <div style={{ color: 'red', marginLeft: '1rem' }}>등록된 강의노트가 없습니다</div>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                textDecoration: 'underline',\r\n                color: 'skyblue',\r\n                marginLeft: '1rem',\r\n              }}\r\n            >\r\n              <a href={FileURL}>{lessonDetails.title} 강의노트 다운로드</a>\r\n              <div>\r\n                <Iframe url={Url} width=\"700px\" height=\"400px\" />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {lessonDetails.type === 1 ? (\r\n          <div\r\n            style={{\r\n              fontSize: '1rem',\r\n              paddingBottom: '0.5rem',\r\n              marginBottom: '2rem',\r\n              marginTop: '15px',\r\n              marginRight: '15px',\r\n              fontWeight: 'bold',\r\n              marginLeft: '15px',\r\n              display: 'flex',\r\n            }}\r\n          >\r\n            {isProfessor ? (\r\n              <div style={{ cursor: 'pointer' }} onClick={LessonCheck}>\r\n                실시간 수업입장\r\n              </div>\r\n            ) : (\r\n              <div style={{ cursor: 'pointer' }} onClick={LessonCheck}>\r\n                실시간 수업입장\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : lessonDetails.type === 2 ? (\r\n          <div\r\n            style={{\r\n              fontSize: '1rem',\r\n              paddingBottom: '0.5rem',\r\n              marginBottom: '2rem',\r\n              marginTop: '15px',\r\n              marginRight: '15px',\r\n              fontWeight: 'bold',\r\n              marginLeft: '15px',\r\n              display: 'flex',\r\n            }}\r\n          >\r\n            강의실 정보 : {lessonDetails.room}\r\n          </div>\r\n        ) : (\r\n          <div\r\n            style={{\r\n              fontSize: '1rem',\r\n              paddingBottom: '0.5rem',\r\n              marginBottom: '2rem',\r\n              marginTop: '15px',\r\n              marginRight: '15px',\r\n              fontWeight: 'bold',\r\n              marginLeft: '15px',\r\n              display: 'flex',\r\n            }}\r\n          >\r\n            녹화 강의 : {lessonDetails.videoUrl}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <hr style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }} />\r\n      {userType === 'S' ? (\r\n        <div></div>\r\n      ) : (\r\n        <>\r\n          <div style={{ display: 'flex' }}>\r\n            <div style={{ width: '50%' }}>\r\n              <Bar options={options} data={data} />\r\n            </div>\r\n            <div style={{ width: '50%', marginLeft: '1rem' }}>\r\n              {/* <WriteAcitonButtonBlock>\r\n                  <StyledButton cyan onClick={}>일괄 결석</StyledButton>\r\n                <StyledButton cyan onClick={}>일괄 출석</StyledButton>\r\n              </WriteAcitonButtonBlock> */}\r\n              <table\r\n                style={{\r\n                  width: '100%',\r\n                  textAlign: 'center',\r\n                  marginRight: '5px',\r\n                  borderRight: '1px solid #D5D5D5',\r\n                }}\r\n              >\r\n                <thead\r\n                  style={{\r\n                    borderBottom: '1px solid #D5D5D5',\r\n                    fontWeight: 'bold',\r\n                    fontWeight: '500',\r\n                    backgroundColor: '#f3f3f3',\r\n                  }}\r\n                >\r\n                  <tr>\r\n                    <th style={{ padding: '10px 0', width: 'auto' }}>이름</th>\r\n                    <th style={{ padding: '10px 0', width: 'auto' }}>학번</th>\r\n                    <th style={{ padding: '10px 0', width: 'auto' }}>출결</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {studentInfo.map((studentList, index) => (\r\n                    <TabletrColor key={index}>\r\n                      <td style={{ padding: '10px 0', borderBottom: '1px solid #D5D5D5' }}>\r\n                        {studentList.studentName}\r\n                      </td>\r\n                      <td style={{ padding: '10px 0', borderBottom: '1px solid #D5D5D5' }}>\r\n                        {studentList.studentNumber}\r\n                      </td>\r\n                      <td style={{ padding: '10px 0', borderBottom: '1px solid #D5D5D5' }}>\r\n                        {studentList.attendanceList[0].status === 2 ? (\r\n                          <div style={{ color: 'green', fontWeight: 'bold' }}>출석</div>\r\n                        ) : studentList.attendanceList[0].status === 1 ? (\r\n                          <div style={{ color: 'yellowgreen', fontWeight: 'bold' }}>지각</div>\r\n                        ) : (\r\n                          <div style={{ color: 'red', fontWeight: 'bold' }}>결석</div>\r\n                        )}\r\n                      </td>\r\n                    </TabletrColor>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <hr\r\n            style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }}\r\n          />\r\n        </>\r\n      )}\r\n      <div style={{ height: '5rem' }}>\r\n        <StyledButton cyan onClick={onCancel}>\r\n          뒤로가기\r\n        </StyledButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LessonDetail;\r\n","import React, {\n  useState,\n  useCallback,\n  useContext,\n  useEffect,\n  MutableRefObject,\n} from 'react';\nimport classNames from 'classnames';\nimport { message } from 'antd';\nimport ZoomContext from '../../../context/zoom-context';\nimport CameraButton from './camera';\nimport MicrophoneButton from './microphone';\nimport { ScreenShareButton, ScreenShareLockButton } from './screen-share';\nimport ZoomMediaContext from '../../../context/media-context';\nimport { useUnmount } from '../../../hooks';\nimport { MediaDevice } from '../video-types';\nimport './video-footer.scss';\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nconst LeaveBtn = styled.button`\n  position: absolute;\n  margin-top:3rem;\n  right: 0;\n  margin-right: 30px;\n  color: red;\n`;\n\ninterface VideoFooterProps {\n  className?: string;\n  shareRef?: MutableRefObject<HTMLCanvasElement | null>;\n  sharing?: boolean;\n  lectureId: string;\n  lessonId: string;\n  sessionId: string;\n}\nconst isAudioEnable = typeof AudioWorklet === 'function';\nconst VideoFooter = (props: VideoFooterProps) => {\n  const { className, shareRef, sharing ,lectureId,lessonId,sessionId } = props;\n  const [isStartedAudio, setIsStartedAudio] = useState(false);\n  const [isStartedVideo, setIsStartedVideo] = useState(false);\n  const [isStartedScreenShare, setIsStartedScreenShare] = useState(false);\n  const [isLockedScreenShare, setIsLockedScreenShare] = useState(false);\n  const [isMuted, setIsMuted] = useState(true);\n  const [activeMicrophone, setActiveMicrophone] = useState('');\n  const [activeSpeaker, setActiveSpeaker] = useState('');\n  const [activeCamera, setActiveCamera] = useState('');\n  const [micList, setMicList] = useState<MediaDevice[]>([]);\n  const [speakerList, setSpeakerList] = useState<MediaDevice[]>([]);\n  const [cameraList, setCameraList] = useState<MediaDevice[]>([]);\n  const { mediaStream } = useContext(ZoomMediaContext);\n  const zmClient = useContext(ZoomContext);\n  const user = JSON.parse(localStorage.userInfo);\n  const userType = user.userType;\n  const token = localStorage.getItem(\"token\")\n  const onCameraClick = useCallback(async () => {\n    if (isStartedVideo) {\n      await mediaStream?.stopVideo();\n      setIsStartedVideo(false);\n    } else {\n      await mediaStream?.startVideo();\n      setIsStartedVideo(true);\n    }\n  }, [mediaStream, isStartedVideo]);\n  const onMicrophoneClick = useCallback(async () => {\n    if (isStartedAudio) {\n      if (isMuted) {\n        await mediaStream?.unmuteAudio();\n        setIsMuted(false);\n      } else {\n        await mediaStream?.muteAudio();\n        setIsMuted(true);\n      }\n    } else {\n      await mediaStream?.startAudio();\n      setIsStartedAudio(true);\n    }\n  }, [mediaStream, isStartedAudio, isMuted]);\n  const onMicrophoneMenuClick = async (key: string) => {\n    if (mediaStream) {\n      const [type, deviceId] = key.split('|');\n      if (type === 'microphone') {\n        if (deviceId !== activeMicrophone) {\n          await mediaStream.switchMicrophone(deviceId);\n          setActiveMicrophone(mediaStream.getActiveMicrophone());\n        }\n      } else if (type === 'speaker') {\n        if (deviceId !== activeSpeaker) {\n          await mediaStream.switchSpeaker(deviceId);\n          setActiveSpeaker(mediaStream.getActiveSpeaker());\n        }\n      } else if (type === 'leave audio') {\n        await mediaStream.stopAudio();\n        setIsStartedAudio(false);\n      }\n    }\n  };\n  const onSwitchCamera = async (key: string) => {\n    if (mediaStream) {\n      if (activeCamera !== key) {\n        await mediaStream.switchCamera(key);\n        setActiveCamera(mediaStream.getActiveCamera());\n      }\n    }\n  };\n  const onHostAudioMuted = useCallback((payload) => {\n    const { action, source, type } = payload;\n    if (action === 'join' && type === 'computer') {\n      setIsStartedAudio(true);\n    } else if (action === 'leave') {\n      setIsStartedAudio(false);\n    } else if (action === 'muted') {\n      setIsMuted(true);\n      if (source === 'passive(mute one)') {\n        message.info('Host muted you');\n      }\n    } else if (action === 'unmuted') {\n      setIsMuted(false);\n      if (source === 'passive') {\n        message.info('Host unmuted you');\n      }\n    }\n  }, []);\n  const onScreenShareClick = useCallback(async () => {\n    if (!isStartedScreenShare && shareRef && shareRef.current) {\n      await mediaStream?.startShareScreen(shareRef.current);\n      setIsStartedScreenShare(true);\n    } else if (isStartedScreenShare) {\n      await mediaStream?.stopShareScreen();\n      setIsStartedScreenShare(false);\n    }\n  }, [mediaStream, isStartedScreenShare, shareRef]);\n  const onPassivelyStopShare = useCallback(({ reason }) => {\n    console.log('passively stop reason:', reason);\n    setIsStartedScreenShare(false);\n  }, []);\n  const onDeviceChange = useCallback(() => {\n    if (mediaStream) {\n      setMicList(mediaStream.getMicList());\n      setSpeakerList(mediaStream.getSpeakerList());\n      setCameraList(mediaStream.getCameraList());\n      setActiveMicrophone(mediaStream.getActiveMicrophone());\n      setActiveSpeaker(mediaStream.getActiveSpeaker());\n      setActiveCamera(mediaStream.getActiveCamera());\n    }\n  }, [mediaStream]);\n\n  \n  useEffect(() => {\n    zmClient.on('current-audio-change', onHostAudioMuted);\n    zmClient.on('passively-stop-share', onPassivelyStopShare);\n    zmClient.on('device-change', onDeviceChange);\n    return () => {\n      zmClient.off('current-audio-change', onHostAudioMuted);\n      zmClient.off('passively-stop-share', onPassivelyStopShare);\n      zmClient.off('device-change', onDeviceChange);\n    };\n  }, [zmClient, onHostAudioMuted, onPassivelyStopShare, onDeviceChange]);\n  useUnmount(() => {\n    if (isStartedAudio) {\n      mediaStream?.stopAudio();\n    }\n    if (isStartedVideo) {\n      mediaStream?.stopVideo();\n    }\n    if (isStartedScreenShare) {\n      mediaStream?.stopShareScreen();\n    }\n  });\n\n  const OutSession = () => {\n    if (userType === \"T\") {\n      zmClient.leave();\n      alert(\"세션을 종료합니다. 퇴장후 다시 입장하실 수 없습니다.\")\n      axios.get(`/lecture/${lectureId}/lesson/${lessonId}/live/exit`, { headers: { \"X-AUTH-TOKEN\": `${token}` }, params: { session: `${sessionId}` } })\n        .then((res) => {\n          const result = res.data.result;\n          if (result === \"SUCCESS\") {\n            return window.location.href = `/Main/Lecture/${lectureId}/Lesson`;\n          }\n      })\n    }\n    else {\n    zmClient.leave();\n    alert(\"수업을 나갑니다\");\n    return window.location.href = `/Main/Lecture/${lectureId}/Lesson`;\n      }\n  }\n  return (\n    <div className={classNames('video-footer', className)}>\n      {isAudioEnable && (\n      <MicrophoneButton\n        isStartedAudio={isStartedAudio}\n        isMuted={isMuted}\n        onMicrophoneClick={onMicrophoneClick}\n          onMicrophoneMenuClick={onMicrophoneMenuClick}\n          microphoneList={micList}\n          speakerList={speakerList}\n          activeMicrophone={activeMicrophone}\n          activeSpeaker={activeSpeaker}\n        />\n      )}\n      <CameraButton\n        isStartedVideo={isStartedVideo}\n        onCameraClick={onCameraClick}\n        onSwitchCamera={onSwitchCamera}\n        cameraList={cameraList}\n        activeCamera={activeCamera}\n      />\n      {sharing && (\n        <ScreenShareButton\n          isStartedScreenShare={isStartedScreenShare}\n          onScreenShareClick={onScreenShareClick}\n        />\n      )}\n      {(zmClient.isManager() || zmClient.isHost())&& (\n        <ScreenShareLockButton\n        isLockedScreenShare={isLockedScreenShare}\n        onScreenShareLockClick={()=>{\n          mediaStream?.lockShare(!isLockedScreenShare);\n          setIsLockedScreenShare(!isLockedScreenShare);\n        }}\n      />\n      )}\n      <LeaveBtn onClick={OutSession}>나가기</LeaveBtn>\n    </div>\n  );\n};\nexport default VideoFooter;\n","import React, { useContext, useRef } from 'react';\nimport classnames from 'classnames';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ZoomContext from '../../context/zoom-context';\nimport ZoomMediaContext from '../../context/media-context';\nimport Avatar from './components/avatar';\nimport VideoFooter from './components/video-footer';\nimport Pagination from './components/pagination';\nimport { useCanvasDimension } from './hooks/useCanvasDimension';\nimport { useGalleryLayout } from './hooks/useGalleryLayout';\nimport { usePagination } from './hooks/usePagination';\nimport { useActiveVideo } from './hooks/useAvtiveVideo';\nimport { useShare } from './hooks/useShare';\nimport './video.scss';\nimport { isSupportWebCodecs } from '../../utils/platform';\nimport Chat from \"../chat/chat\";\nimport axios from \"axios\";\nimport { Button } from \"antd\";\nimport styled from 'styled-components';\n\nconst LeaveBtn = styled.button`\n  position: absolute;\n  right: 0;\n  margin-right: 30px;\n  color: red;\n`;\n\ninterface VideoProps extends RouteComponentProps {\n  lectureId: string;\n  lessonId: string; \n  sessionId: string;\n}\n\nconst VideoContainer: React.FunctionComponent<VideoProps> = (props) => {\n  const { history, lectureId, lessonId ,sessionId} = props;\n  const zmClient = useContext(ZoomContext);\n  const {\n    mediaStream,\n    video: { decode: isVideoDecodeReady },\n  } = useContext(ZoomMediaContext);\n  const videoRef = useRef<HTMLCanvasElement | null>(null);\n  const shareRef = useRef<HTMLCanvasElement  | null>(null);\n  const selfShareRef = useRef<HTMLCanvasElement & HTMLVideoElement| null>(null);\n  const shareContainerRef = useRef<HTMLDivElement | null>(null);\n  const canvasDimension = useCanvasDimension(mediaStream, videoRef);\n  const activeVideo = useActiveVideo(zmClient);\n  const { page, pageSize, totalPage, totalSize, setPage } = usePagination(\n    zmClient,\n    canvasDimension,\n  );\n  const { visibleParticipants, layout: videoLayout } = useGalleryLayout(\n    zmClient,\n    mediaStream,\n    isVideoDecodeReady,\n    videoRef,\n    canvasDimension,\n    {\n      page,\n      pageSize,\n      totalPage,\n      totalSize,\n    },\n  );\n  const { isRecieveSharing, isStartedShare, sharedContentDimension } = useShare(\n    zmClient,\n    mediaStream,\n    shareRef,\n  );\n  const isSharing = isRecieveSharing || isStartedShare;\n  const contentDimension = sharedContentDimension;\n  if (isSharing && shareContainerRef.current) {\n    const { width, height } = sharedContentDimension;\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = shareContainerRef.current.getBoundingClientRect();\n    const ratio = Math.min(containerWidth / width, containerHeight / height, 1);\n    contentDimension.width = Math.floor(width * ratio);\n    contentDimension.height = Math.floor(height * ratio);\n  }\n\n  \n\n  return (\n    <div className=\"viewport\">\n      <div\n        className={classnames('share-container', {\n          'in-sharing': isSharing,\n        })}\n        ref={shareContainerRef}\n      >\n        <div\n          className=\"share-container-viewport\"\n          style={{\n            width: `${contentDimension.width}px`,\n            height: `${contentDimension.height}px`,\n          }}\n        >\n          <canvas\n            className={classnames('share-canvas', { hidden: isStartedShare })}\n            ref={shareRef}\n          />\n          {isSupportWebCodecs()?<video\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />:<canvas\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />}\n        </div>\n      </div>\n      <div\n        className={classnames('video-container', {\n          'in-sharing': isSharing,\n        })}\n      >\n        <canvas\n          className=\"video-canvas\"\n          id=\"video-canvas\"\n          width=\"800\"\n          height=\"600\"\n          ref={videoRef}\n        />\n        <ul className=\"avatar-list\">\n          {visibleParticipants.map((user, index) => {\n            if (index > videoLayout.length - 1) {\n              return null;\n            }\n            const dimension = videoLayout[index];\n            const { width, height, x, y } = dimension;\n            const { height: canvasHeight } = canvasDimension;\n            return (\n              <Avatar\n                participant={user}\n                key={user.userId}\n                isActive={activeVideo === user.userId}\n                style={{\n                  width: `${width}px`,\n                  height: `${height}px`,\n                  top: `${canvasHeight - y - height}px`,\n                  left: `${x}px`,\n                }}\n              />\n            );\n          })}\n        </ul>\n      </div>\n      <VideoFooter className=\"video-operations\" sharing shareRef={selfShareRef} lectureId={props.lectureId} lessonId={props.lessonId} sessionId={props.sessionId} />\n      {totalPage > 1 && (\n        <Pagination\n          page={page}\n          totalPage={totalPage}\n          setPage={setPage}\n          inSharing={isSharing}\n        />\n      )}\n      <Chat/>\n    </div>\n  );\n};\n\nexport default VideoContainer;\n","import React, {\n  useEffect,\n  useContext,\n  useState,\n  useCallback,\n  useReducer,\n} from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ZoomVideo, { ConnectionState } from \"@zoom/videosdk\";\nimport { message, Modal } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport produce from \"immer\";\nimport Home from \"../ZoomSample/feature/home/home\";\nimport Video from \"../ZoomSample/feature/video/video\";\nimport VideoSingle from '../ZoomSample/feature/video/video-single';\nimport Preview from \"../ZoomSample/feature/preview/preview\";\nimport ZoomContext from \"../ZoomSample/context/zoom-context\";\nimport ZoomMediaContext from \"../ZoomSample/context/media-context\";\nimport ChatContext from \"../ZoomSample/context/chat-context\";\nimport LoadingLayer from \"../ZoomSample/component/loading-layer\";\nimport Chat from \"../ZoomSample/feature/chat/chat\";\nimport { ChatClient, MediaStream } from \"../index-types\";\nimport \"./test.css\";\nimport { generateVideoToken } from \"../ZoomSample/utils/util\";\n\n\nconst mediaShape = {\n  audio: {\n    encode: false,\n    decode: false,\n  },\n  video: {\n    encode: false,\n    decode: false,\n  },\n  share: {\n    encode: false,\n    decode: false,\n  },\n};\nconst mediaReducer = produce((draft, action) => {\n  switch (action.type) {\n    case \"audio-encode\": {\n      draft.audio.encode = action.payload;\n      break;\n    }\n    case \"audio-decode\": {\n      draft.audio.decode = action.payload;\n      break;\n    }\n    case \"video-encode\": {\n      draft.video.encode = action.payload;\n      break;\n    }\n    case \"video-decode\": {\n      draft.video.decode = action.payload;\n      break;\n    }\n    case \"share-encode\": {\n      draft.share.encode = action.payload;\n      break;\n    }\n    case \"share-decode\": {\n      draft.share.decode = action.payload;\n      break;\n    }\n    default:\n      break;\n  }\n}, mediaShape);\n\ninterface TestProps {\n  match: {\n    params: {\n      lectureId: string,\n      lessonId: string,\n      sessionId: string\n    }\n  }\n}\n\nfunction TestZoom(props: TestProps) {\n  const [loading, setIsLoading] = useState(true);\n  const [loadingText, setLoadingText] = useState(\"\");\n  const [isFailover, setIsFailover] = useState<boolean>(false);\n  const [status, setStatus] = useState<string>(\"closed\");\n  const [mediaState, dispatch] = useReducer(mediaReducer, mediaShape);\n  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);\n  const [chatClient, setChatClient] = useState<ChatClient | null>(null);\n  const [isSupportGalleryView, setIsSupportGalleryView] = useState<boolean>(true);\n  const zmClient = useContext(ZoomContext);\n  const user = JSON.parse(localStorage.userInfo);\n  const userType = user.userType;\n  const userName = user.name;\n  const sessionId = props.match.params.sessionId;\n  const lectureId = props.match.params.lectureId;\n  const lessonId = props.match.params.lessonId;\n  const token = generateVideoToken(\n    \"MoRylmD2jBq9NfbZXbSVmvZcGYOFkDCeJc3e\",\n    \"NewabYwGXIFrOlPRf4dZBKeqFECESIkdlLrq\",\n    sessionId,\n    \"\",\n    \"\",\n    \"\"\n      ); \n  useEffect(() => {\n    const init = async () => {\n      await zmClient.init(\"en-US\", `${window.location.origin}/lib`, 'zoom.us');\n      try {\n        setLoadingText(\"Joining the session...\");\n        await zmClient.join(sessionId, token, userName, \"\");\n        const stream = zmClient.getMediaStream();\n        setMediaStream(stream);\n\t      setIsSupportGalleryView(stream.isSupportMultipleVideos());\n        const chatClient = zmClient.getChatClient();\n        setChatClient(chatClient);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n       \n      }\n    };\n    init();\n    return () => {\n      ZoomVideo.destroyClient();\n    };\n  }, [zmClient]);\n  const onConnectionChange = useCallback(\n    (payload) => {\n      if (payload.state === ConnectionState.Reconnecting) {\n        setIsLoading(true);\n        setIsFailover(true);\n        setStatus(\"connecting\");\n        const { reason } = payload;\n        if (reason === \"failover\") {\n          setLoadingText(\"Session Disconnected,Try to reconnect\");\n        }\n      } else if (payload.state === ConnectionState.Connected) {\n        setStatus(\"connected\");\n        if (isFailover) {\n          setIsLoading(false);\n        }\n      } else if (payload.state === ConnectionState.Closed) {\n        setStatus(\"closed\");\n        if (payload.reason === \"ended by host\") {\n          Modal.warning({\n            title: \"Meeting ended\",\n            content: \"This meeting has been ended by host\",\n          });\n        }\n      }\n    },\n    [isFailover]\n  );\n  const onMediaSDKChange = useCallback((payload) => {\n    const { action, type, result } = payload;\n    dispatch({ type: `${type}-${action}`, payload: result === \"success\" });\n  }, []);\n  const onLeaveOrJoinSession = useCallback(async () => {\n    if (status === \"closed\") {\n      setIsLoading(true);\n      await zmClient.join(sessionId, token, userName, \"\");\n      setIsLoading(false);\n    } else if (status === \"connected\") {\n      await zmClient.leave();\n      message.warn(\"You have left the session.\");\n    }\n  }, [zmClient, status]);\n  useEffect(() => {\n    zmClient.on(\"connection-change\", onConnectionChange);\n    zmClient.on(\"media-sdk-change\", onMediaSDKChange);\n    return () => {\n      zmClient.off(\"connection-change\", onConnectionChange);\n      zmClient.off(\"media-sdk-change\", onMediaSDKChange);\n    };\n  }, [zmClient, onConnectionChange, onMediaSDKChange]);\n  return (\n    <div className=\"App\">\n      {loading && <LoadingLayer content={loadingText} />}\n      {!loading && (\n        <ZoomMediaContext.Provider value={{ ...mediaState, mediaStream }}>\n          <ChatContext.Provider value={chatClient}>  \n            \n            \n            {/* <Router>\n              <Switch>\n                <Route\n                  path={`/class/${lectureId}/${lessonId}/${sessionId}/${userType}`}\n                  render={(props) => (\n                    <Home\n                      {...props}\n                      status={status}\n                      onLeaveOrJoinSession={onLeaveOrJoinSession}\n                    />\n                  )}\n                  exact\n                />\n                <Route\n                   path={`/class/${lectureId}/${lessonId}/${sessionId}/${userType}`}\n                  render={(props) => (\n                    <Home\n                      {...props}\n                      status={status}\n                      onLeaveOrJoinSession={onLeaveOrJoinSession}\n                    />\n                  )}\n                  exact\n                />\n                <Route\n                  path=\"/preview\"\n                  component={Preview}\n                /> */}\n            {/* <Route path={`/class/${lectureId}/${lessonId}/${sessionId}/${userType}`} component= {isSupportGalleryView ? Video : VideoSingle} /> */}\n            <Route path={`/class/${lectureId}/${lessonId}/${sessionId}/${userType}`} render={(props) => (\n              isSupportGalleryView ? (<Video {...props} lectureId={lectureId} lessonId={lessonId} sessionId={sessionId} />) : (<VideoSingle {...props} lectureId={lectureId} lessonId={lessonId} sessionId={sessionId}/>)\n            )} />\n              \n            \n                {/* <Route path=\"/chat\" component={Chat} />\n              </Switch>\n            </Router> */}\n          </ChatContext.Provider>\n        </ZoomMediaContext.Provider>\n      )}\n    </div>\n  );\n}\n\nexport default TestZoom;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AASA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAJA;AAFA;AAaA;AACA;AACA;AAEA;AACA;AAKA;AAPA;AAHA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AA1CA;AAAA;AAAA;AAAA;AAAA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AA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AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAcA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AA1BA;AA4BA;AACA;AAWA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAgCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAhCA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAiDA;AACA;AAlJA;AACA;AADA;AAmJA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}