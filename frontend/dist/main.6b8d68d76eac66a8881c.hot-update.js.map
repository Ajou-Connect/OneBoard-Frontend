{"version":3,"file":"main.6b8d68d76eac66a8881c.hot-update.js","sources":["/mnt/f/SW_Capstone/frontend/src/Pages/LecturePages/Assignment/StudentAssignmentDetail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport moment from 'moment';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport Iframe from 'react-iframe';\r\nimport Button from '../../../Component/common/Button';\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n  margin: 1rem 0;\r\n  & + & {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst Title = styled.div`\r\n  margin-top: 20px;\r\n  margin-left: 20px;\r\n  font-size: 30px;\r\n  border-bottom: 1px solid #f7f9fc;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  font-style: italic;\r\n`;\r\n\r\nconst ProblemContainer = styled.div`\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  padding: 30px 15px;\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  box-shadow: 0 5px 5px 0 #eeeeee;\r\n`;\r\nconst ProblemTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`;\r\nconst ProblemContent = styled.div`\r\n  width: 100%;\r\n  margin: 10px auto;\r\n  padding: 0 5px;\r\n`;\r\nconst AnswerInput = styled.textarea`\r\n  height: 60px;\r\n  width: 100%;\r\n  resize: none;\r\n  border: 1px solid #d9d9d9;\r\n  &:focus {\r\n    border: 1px solid #40a9ff;\r\n    box-shadow: 0 0 0 2px #1890ff 20%;\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\n//여기서의 match는 각각의 assignment에 대한 렌더링을 위해서\r\nconst StudentAssignmentDetail = ({ match }) => {\r\n  const user = JSON.parse(window.localStorage.userInfo);\r\n  const userType = user.userType;\r\n  const token = localStorage.getItem('token');\r\n  const [assignments, setAssignments] = useState({});\r\n  const [studentFile, setStudentFile] = useState('');\r\n  const [studentAnswer, setStudentAnswer] = useState('');\r\n  const today = moment();\r\n  const assignmentId = match.params.assignmentId;\r\n  const lectureId = match.params.lectureId;\r\n  const [onGoing, setOnGoing] = useState(false);\r\n  const [submitData, setSubmitData] = useState({});\r\n  const [submitFile, setSubmitFile] = useState('');\r\n  const [studentSubmitFile, setStudentSubmitFile] = useState('');\r\n  const [onSubmit, setOnSubmit] = useState(false);\r\n  const getData = () => {\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(`/lecture/${lectureId}/assignment/${assignmentId}`)\r\n        .then((res) => {\r\n          const result = res.data.data;\r\n          console.log(result);\r\n          setAssignments(result);\r\n          if (today.isBefore(result.endDt) && today.isAfter(result.startDt)) {\r\n            setOnGoing(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  const getSubmitData = () => {\r\n    console.log(token);\r\n    console.log(lectureId);\r\n    console.log(assignmentId);\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(`/lecture/${lectureId}/assignment/${assignmentId}/submit`, {\r\n          headers: { 'X-AUTH-TOKEN': `${token}` },\r\n        })\r\n        .then((res) => {\r\n          const result = res.data.data;\r\n          console.log(result);\r\n          if (result !== null) {\r\n            setSubmitData(result);\r\n            setSubmitFile(result.fileUrl);\r\n            setOnSubmit(true);\r\n          } else {\r\n            console.log(result);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n          reject(e);\r\n        });\r\n    });\r\n  };\r\n\r\n  const stateDisplay = (startDate, endDate) => {\r\n    if (today.isBefore(startDate)) {\r\n      return (\r\n        <div style={{ color: '#BFBFBF', fontWeight: '700' }}>\r\n          {moment(startDate).format('M월 D일 HH:mm')} - {moment(endDate).format('M월 D일 HH:mm')}{' '}\r\n          (예정)\r\n        </div>\r\n      );\r\n    } else if (today.isBefore(endDate)) {\r\n      return (\r\n        <div style={{ color: '#61C679', fontWeight: '700' }}>\r\n          {moment(startDate).format('M월 D일 HH:mm')} - {moment(endDate).format('M월 D일 HH:mm')}{' '}\r\n          (진행중)\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div style={{ color: '#E24C4B', fontWeight: '700' }}>\r\n          {moment(startDate).format('M월 D일 HH:mm')} - {moment(endDate).format('M월 D일 HH:mm')}{' '}\r\n          (마감)\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    getSubmitData();\r\n    console.log(submitFile);\r\n  }, []);\r\n\r\n  const headersConfig = {\r\n    'X-AUTH-TOKEN': `${token}`,\r\n    'Content-Type': 'multipart/form-data',\r\n  };\r\n\r\n  //수정 필요\r\n  const submitAssignment = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('content', studentAnswer);\r\n    formData.append('file', studentSubmitFile);\r\n    axios\r\n      .post(`/lecture/${lectureId}/assignment/${assignmentId}/submit`, formData, {\r\n        headers: headersConfig,\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        return (window.location.href = `/Main/Lecture/${userType}/${lectureId}/Assignment`);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const onChangeAnswer = (e) => {\r\n    setStudentAnswer(e.target.value);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  const onCancel = () => {\r\n    return (window.location.href = `/Main/Lecture/${userType}/${lectureId}/Assignment`);\r\n  };\r\n\r\n  const onFileChange = (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target.files);\r\n    setStudentSubmitFile(e.target.files[0]);\r\n  };\r\n\r\n  const onUpdate = () => {\r\n    return (window.location.href = `/Main/Lecture/${userType}/${lectureId}/Assignment/${assignmentId}/StudentDetail/Update`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Title>Assignment</Title>\r\n      <hr\r\n        style={{\r\n          width: '100%',\r\n          margin: '30px 0px',\r\n          marginTop: '50px',\r\n          display: 'block',\r\n          borderColor: '#ffffff',\r\n        }}\r\n      />\r\n      <ProblemContainer>\r\n        <ProblemTitle>제목 : {assignments.title}</ProblemTitle>\r\n        <hr\r\n          style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }}\r\n        />\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            margin: '0',\r\n            padding: '0px 5px',\r\n            fontWeight: '700',\r\n          }}\r\n        >\r\n          <div>{stateDisplay(moment(assignments.startDt), moment(assignments.endDt))}</div>\r\n          <div>배점 {assignments.score}</div>\r\n        </div>\r\n        <ProblemContent>{ReactHtmlParser(assignments.content)}</ProblemContent>\r\n        <hr\r\n          style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }}\r\n        />\r\n      </ProblemContainer>\r\n      <ProblemContainer style={{ margin: '10px auto' }}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {onGoing === false ? (\r\n            <ProblemTitle>제출물</ProblemTitle>\r\n          ) : onSubmit ? (\r\n            <ProblemTitle>제출물</ProblemTitle>\r\n          ) : (\r\n            <div>\r\n              <ProblemTitle>과제 제출 작성</ProblemTitle>\r\n              <StyledButton cyan onClick={submitAssignment}>\r\n                제출하기\r\n              </StyledButton>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <hr\r\n          style={{ width: '100%', margin: '10px 0px', display: 'block', borderColor: '#ffffff' }}\r\n        />\r\n        {onGoing === false ? (\r\n          <div>\r\n            <div style={{ display: 'flex' }}>\r\n              <ProblemTitle>{assignments.title}</ProblemTitle>\r\n              <div style={{ fontWeight: '600', fontSize: '20px', marginLeft: 'auto' }}>\r\n                점수 : {submitData.score} / {assignments.score}\r\n              </div>\r\n            </div>\r\n            <hr\r\n              style={{\r\n                width: '100%',\r\n                margin: '10px 0px',\r\n                display: 'block',\r\n                borderColor: '#ffffff',\r\n              }}\r\n            />\r\n            <div>\r\n              <div>{submitData.content}</div>\r\n              <div>\r\n                {submitFile === null ? (\r\n                  <div style={{ marginTop: '10px', fontWeight: 'bold', fontSize: '1.1rem' }}>\r\n                    제출된 과제파일이 없습니다\r\n                  </div>\r\n                ) : (\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div style={{ marginRight: 'auto' }}>\r\n                      <Iframe\r\n                        url={`https://docs.google.com/gview?embedded=true&url=https://oneboard.connect.o-r.kr:8080${submitData.fileUrl}`}\r\n                        width=\"500px\"\r\n                        height=\"500px\"\r\n                      />\r\n                    </div>\r\n                    <a\r\n                      href={submitFile}\r\n                      style={{\r\n                        marginTop: '10px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1.1rem',\r\n                        textDecoration: 'underline',\r\n                      }}\r\n                    >\r\n                      제출된 과제파일\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <hr\r\n              style={{\r\n                width: '100%',\r\n                margin: '10px 0px',\r\n                display: 'block',\r\n                borderColor: '#ffffff',\r\n              }}\r\n            />\r\n            <div style={{ fontWeight: '600', fontSize: '20px', color: 'skyblue' }}>\r\n              피드백 :\r\n              <br />\r\n              <br />\r\n              <div style={{ color: 'black' }}>{submitData.feedback}</div>\r\n            </div>\r\n          </div>\r\n        ) : onSubmit ? (\r\n          <div>\r\n            <div style={{ display: 'flex' }}>\r\n              <ProblemTitle>{assignments.title}</ProblemTitle>\r\n              <div style={{ fontWeight: '600', fontSize: '20px', marginLeft: 'auto' }}>\r\n                점수 : {submitData.score} / {assignments.score}\r\n              </div>\r\n            </div>\r\n            <hr\r\n              style={{\r\n                width: '100%',\r\n                margin: '10px 0px',\r\n                display: 'block',\r\n                borderColor: '#ffffff',\r\n              }}\r\n            />\r\n            <div>\r\n              <div style={{ fontSize: '1.0rem' }}>{submitData.content}</div>\r\n              <div>\r\n                {submitFile === null ? (\r\n                  <div style={{ marginTop: '10px', fontWeight: 'bold', fontSize: '1.1rem' }}>\r\n                    제출된 과제파일이 없습니다\r\n                  </div>\r\n                ) : (\r\n                  <div style={{ display: 'flex' }}>\r\n                    <div style={{ marginRight: 'auto' }}>\r\n                      <Iframe\r\n                        url={`https://docs.google.com/gview?embedded=true&url=https://oneboard.connect.o-r.kr:8080${submitData.fileUrl}`}\r\n                        width=\"500px\"\r\n                        height=\"500px\"\r\n                      />\r\n                    </div>\r\n                    <a\r\n                      href={`https://115.85.182.194:8080${submitData.fileUrl}`}\r\n                      style={{\r\n                        marginTop: '10px',\r\n                        fontWeight: 'bold',\r\n                        fontSize: '1.1rem',\r\n                        textDecoration: 'underline',\r\n                      }}\r\n                    >\r\n                      제출된 과제파일\r\n                    </a>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <hr\r\n              style={{\r\n                width: '100%',\r\n                margin: '10px 0px',\r\n                display: 'block',\r\n                borderColor: '#ffffff',\r\n              }}\r\n            />\r\n            <div style={{ fontWeight: '600', fontSize: '20px', color: 'skyblue' }}>\r\n              피드백 :\r\n              <br />\r\n              <br />\r\n              <div style={{ color: 'black' }}>{submitData.feedback}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <AnswerInput placeholder=\"과제 답안 작성\" onChange={onChangeAnswer} />\r\n            <div style={{ display: 'flex', justifyContent: 'space-between', margin: '5px 0' }}>\r\n              <div style={{ paddingLeft: '5px', lineHeight: '41.6px' }}>파일 첨부</div>\r\n              <form name=\"noteFile\" encType=\"multipart/form-data\">\r\n                <input\r\n                  type=\"file\"\r\n                  onChange={onFileChange}\r\n                  style={{ height: '41.6px', padding: '5px', margin: '10px', cursor: 'pointer' }}\r\n                />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </ProblemContainer>\r\n      <div style={{ display: 'flex' }}>\r\n        <StyledButton cyan onClick={onCancel} style={{ marginLeft: '1rem' }}>\r\n          뒤로가기\r\n        </StyledButton>\r\n        {onSubmit === false ? (\r\n          <div></div>\r\n        ) : onGoing ? (\r\n          <StyledButton onClick={onUpdate}>수정하기</StyledButton>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentAssignmentDetail;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAQA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA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","sourceRoot":""}