{"version":3,"file":"main.de1e9e37f826e8761a45.hot-update.js","sources":["/mnt/f/SW_Capstone/frontend/src/ZoomSample/feature/video/components/video-footer.tsx"],"sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useContext,\n  useEffect,\n  MutableRefObject,\n} from 'react';\nimport classNames from 'classnames';\nimport { message } from 'antd';\nimport ZoomContext from '../../../context/zoom-context';\nimport CameraButton from './camera';\nimport MicrophoneButton from './microphone';\nimport { ScreenShareButton, ScreenShareLockButton } from './screen-share';\nimport ZoomMediaContext from '../../../context/media-context';\nimport { useUnmount } from '../../../hooks';\nimport { MediaDevice } from '../video-types';\nimport './video-footer.scss';\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nconst LeaveBtn = styled.button`\n  position: absolute;\n  margin-top:3rem;\n  right: 0;\n  margin-right: 30px;\n  color: red;\n`;\n\ninterface VideoFooterProps {\n  className?: string;\n  shareRef?: MutableRefObject<HTMLCanvasElement | null>;\n  sharing?: boolean;\n  lectureId: string;\n  lessonId: string;\n  sessionId: string;\n}\nconst isAudioEnable = typeof AudioWorklet === 'function';\nconst VideoFooter = (props: VideoFooterProps) => {\n  const { className, shareRef, sharing ,lectureId,lessonId,sessionId } = props;\n  const [isStartedAudio, setIsStartedAudio] = useState(false);\n  const [isStartedVideo, setIsStartedVideo] = useState(false);\n  const [isStartedScreenShare, setIsStartedScreenShare] = useState(false);\n  const [isLockedScreenShare, setIsLockedScreenShare] = useState(false);\n  const [isMuted, setIsMuted] = useState(true);\n  const [activeMicrophone, setActiveMicrophone] = useState('');\n  const [activeSpeaker, setActiveSpeaker] = useState('');\n  const [activeCamera, setActiveCamera] = useState('');\n  const [micList, setMicList] = useState<MediaDevice[]>([]);\n  const [speakerList, setSpeakerList] = useState<MediaDevice[]>([]);\n  const [cameraList, setCameraList] = useState<MediaDevice[]>([]);\n  const { mediaStream } = useContext(ZoomMediaContext);\n  const zmClient = useContext(ZoomContext);\n  const user = JSON.parse(localStorage.userInfo);\n  const userType = user.userType;\n  const token = localStorage.getItem(\"token\")\n  const onCameraClick = useCallback(async () => {\n    if (isStartedVideo) {\n      await mediaStream?.stopVideo();\n      setIsStartedVideo(false);\n    } else {\n      await mediaStream?.startVideo();\n      setIsStartedVideo(true);\n    }\n  }, [mediaStream, isStartedVideo]);\n  const onMicrophoneClick = useCallback(async () => {\n    if (isStartedAudio) {\n      if (isMuted) {\n        await mediaStream?.unmuteAudio();\n        setIsMuted(false);\n      } else {\n        await mediaStream?.muteAudio();\n        setIsMuted(true);\n      }\n    } else {\n      await mediaStream?.startAudio();\n      setIsStartedAudio(true);\n    }\n  }, [mediaStream, isStartedAudio, isMuted]);\n  const onMicrophoneMenuClick = async (key: string) => {\n    if (mediaStream) {\n      const [type, deviceId] = key.split('|');\n      if (type === 'microphone') {\n        if (deviceId !== activeMicrophone) {\n          await mediaStream.switchMicrophone(deviceId);\n          setActiveMicrophone(mediaStream.getActiveMicrophone());\n        }\n      } else if (type === 'speaker') {\n        if (deviceId !== activeSpeaker) {\n          await mediaStream.switchSpeaker(deviceId);\n          setActiveSpeaker(mediaStream.getActiveSpeaker());\n        }\n      } else if (type === 'leave audio') {\n        await mediaStream.stopAudio();\n        setIsStartedAudio(false);\n      }\n    }\n  };\n  const onSwitchCamera = async (key: string) => {\n    if (mediaStream) {\n      if (activeCamera !== key) {\n        await mediaStream.switchCamera(key);\n        setActiveCamera(mediaStream.getActiveCamera());\n      }\n    }\n  };\n  const onHostAudioMuted = useCallback((payload) => {\n    const { action, source, type } = payload;\n    if (action === 'join' && type === 'computer') {\n      setIsStartedAudio(true);\n    } else if (action === 'leave') {\n      setIsStartedAudio(false);\n    } else if (action === 'muted') {\n      setIsMuted(true);\n      if (source === 'passive(mute one)') {\n        message.info('Host muted you');\n      }\n    } else if (action === 'unmuted') {\n      setIsMuted(false);\n      if (source === 'passive') {\n        message.info('Host unmuted you');\n      }\n    }\n  }, []);\n  const onScreenShareClick = useCallback(async () => {\n    if (!isStartedScreenShare && shareRef && shareRef.current) {\n      await mediaStream?.startShareScreen(shareRef.current);\n      setIsStartedScreenShare(true);\n    } else if (isStartedScreenShare) {\n      await mediaStream?.stopShareScreen();\n      setIsStartedScreenShare(false);\n    }\n  }, [mediaStream, isStartedScreenShare, shareRef]);\n  const onPassivelyStopShare = useCallback(({ reason }) => {\n    console.log('passively stop reason:', reason);\n    setIsStartedScreenShare(false);\n  }, []);\n  const onDeviceChange = useCallback(() => {\n    if (mediaStream) {\n      setMicList(mediaStream.getMicList());\n      setSpeakerList(mediaStream.getSpeakerList());\n      setCameraList(mediaStream.getCameraList());\n      setActiveMicrophone(mediaStream.getActiveMicrophone());\n      setActiveSpeaker(mediaStream.getActiveSpeaker());\n      setActiveCamera(mediaStream.getActiveCamera());\n    }\n  }, [mediaStream]);\n  useEffect(() => {\n    zmClient.on('current-audio-change', onHostAudioMuted);\n    zmClient.on('passively-stop-share', onPassivelyStopShare);\n    zmClient.on('device-change', onDeviceChange);\n    return () => {\n      zmClient.off('current-audio-change', onHostAudioMuted);\n      zmClient.off('passively-stop-share', onPassivelyStopShare);\n      zmClient.off('device-change', onDeviceChange);\n    };\n  }, [zmClient, onHostAudioMuted, onPassivelyStopShare, onDeviceChange]);\n  useUnmount(() => {\n    if (isStartedAudio) {\n      mediaStream?.stopAudio();\n    }\n    if (isStartedVideo) {\n      mediaStream?.stopVideo();\n    }\n    if (isStartedScreenShare) {\n      mediaStream?.stopShareScreen();\n    }\n  });\n\n  const OutSession = () => {\n    if (userType === \"T\") {\n      zmClient.leave();\n      alert(\"모든 참가자가 수업을 나갑니다. 퇴장후 다시 입장하실수 없습니다.\")\n      axios.get(`/lecture/${lectureId}/lesson/${lessonId}/live/exit`, { headers: { \"X-AUTH-TOKEN\": `${token}` }, params: { session: `${sessionId}` } })\n        .then((res) => {\n          const result = res.data.result;\n          if (result === \"SUCCESS\") {\n            return window.location.href = `/Main/Lecture`;\n          }\n      })\n    }\n    else {\n    zmClient.leave();\n    alert(\"수업을 나갑니다\");\n    return window.location.href = `/Main/Lecture`;\n      }\n  }\n  return (\n    <div className={classNames('video-footer', className)}>\n      {isAudioEnable && (\n      <MicrophoneButton\n        isStartedAudio={isStartedAudio}\n        isMuted={isMuted}\n        onMicrophoneClick={onMicrophoneClick}\n          onMicrophoneMenuClick={onMicrophoneMenuClick}\n          microphoneList={micList}\n          speakerList={speakerList}\n          activeMicrophone={activeMicrophone}\n          activeSpeaker={activeSpeaker}\n        />\n      )}\n      <CameraButton\n        isStartedVideo={isStartedVideo}\n        onCameraClick={onCameraClick}\n        onSwitchCamera={onSwitchCamera}\n        cameraList={cameraList}\n        activeCamera={activeCamera}\n      />\n      {sharing && (\n        <ScreenShareButton\n          isStartedScreenShare={isStartedScreenShare}\n          onScreenShareClick={onScreenShareClick}\n        />\n      )}\n      {(zmClient.isManager() || zmClient.isHost())&& (\n        <ScreenShareLockButton\n        isLockedScreenShare={isLockedScreenShare}\n        onScreenShareLockClick={()=>{\n          mediaStream?.lockShare(!isLockedScreenShare);\n          setIsLockedScreenShare(!isLockedScreenShare);\n        }}\n      />\n      )}\n      <LeaveBtn onClick={OutSession}>나가기</LeaveBtn>\n    </div>\n  );\n};\nexport default VideoFooter;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAgnCA;AAAA;AAAA;AAAA;AAAA;AAsCA;AACA;AA7LA;AAuHA;;;AAvHA;AA6LA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}