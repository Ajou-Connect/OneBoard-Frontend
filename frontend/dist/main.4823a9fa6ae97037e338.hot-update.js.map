{"version":3,"file":"main.4823a9fa6ae97037e338.hot-update.js","sources":["/mnt/e/sw_capstone/frontend/src/ZoomSample/feature/video/components/video-footer.tsx","/mnt/e/sw_capstone/frontend/src/ZoomSample/feature/video/video.tsx"],"sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useContext,\n  useEffect,\n  MutableRefObject,\n} from 'react';\nimport classNames from 'classnames';\nimport { message } from 'antd';\nimport ZoomContext from '../../../context/zoom-context';\nimport CameraButton from './camera';\nimport MicrophoneButton from './microphone';\nimport { ScreenShareButton, ScreenShareLockButton } from './screen-share';\nimport ZoomMediaContext from '../../../context/media-context';\nimport { useUnmount } from '../../../hooks';\nimport { MediaDevice } from '../video-types';\nimport './video-footer.scss';\ninterface VideoFooterProps {\n  className?: string;\n  shareRef?: MutableRefObject<HTMLCanvasElement | null>;\n  sharing?: boolean;\n}\nconst isAudioEnable = typeof AudioWorklet === 'function';\nconst VideoFooter = (props: VideoFooterProps) => {\n  const { className, shareRef, sharing } = props;\n  const [isStartedAudio, setIsStartedAudio] = useState(false);\n  const [isStartedVideo, setIsStartedVideo] = useState(false);\n  const [isStartedScreenShare, setIsStartedScreenShare] = useState(false);\n  const [isLockedScreenShare, setIsLockedScreenShare] = useState(false);\n  \n  const [isMuted, setIsMuted] = useState(true);\n  const [activeMicrophone, setActiveMicrophone] = useState('');\n  const [activeSpeaker, setActiveSpeaker] = useState('');\n  const [activeCamera, setActiveCamera] = useState('');\n  const [micList, setMicList] = useState<MediaDevice[]>([]);\n  const [speakerList, setSpeakerList] = useState<MediaDevice[]>([]);\n  const [cameraList, setCameraList] = useState<MediaDevice[]>([]);\n  const { mediaStream } = useContext(ZoomMediaContext);\n  const zmClient = useContext(ZoomContext);\n  const onCameraClick = useCallback(async () => {\n    if (isStartedVideo) {\n      await mediaStream?.stopVideo();\n      setIsStartedVideo(false);\n    } else {\n      await mediaStream?.startVideo();\n      setIsStartedVideo(true);\n    }\n  }, [mediaStream, isStartedVideo]);\n  const onMicrophoneClick = useCallback(async () => {\n    if (isStartedAudio) {\n      if (isMuted) {\n        await mediaStream?.unmuteAudio();\n        setIsMuted(false);\n      } else {\n        await mediaStream?.muteAudio();\n        setIsMuted(true);\n      }\n    } else {\n      await mediaStream?.startAudio();\n      setIsStartedAudio(true);\n    }\n  }, [mediaStream, isStartedAudio, isMuted]);\n  const onMicrophoneMenuClick = async (key: string) => {\n    if (mediaStream) {\n      const [type, deviceId] = key.split('|');\n      if (type === 'microphone') {\n        if (deviceId !== activeMicrophone) {\n          await mediaStream.switchMicrophone(deviceId);\n          setActiveMicrophone(mediaStream.getActiveMicrophone());\n        }\n      } else if (type === 'speaker') {\n        if (deviceId !== activeSpeaker) {\n          await mediaStream.switchSpeaker(deviceId);\n          setActiveSpeaker(mediaStream.getActiveSpeaker());\n        }\n      } else if (type === 'leave audio') {\n        await mediaStream.stopAudio();\n        setIsStartedAudio(false);\n      }\n    }\n  };\n  const onSwitchCamera = async (key: string) => {\n    if (mediaStream) {\n      if (activeCamera !== key) {\n        await mediaStream.switchCamera(key);\n        setActiveCamera(mediaStream.getActiveCamera());\n      }\n    }\n  };\n  const onHostAudioMuted = useCallback((payload) => {\n    const { action, source, type } = payload;\n    if (action === 'join' && type === 'computer') {\n      setIsStartedAudio(true);\n    } else if (action === 'leave') {\n      setIsStartedAudio(false);\n    } else if (action === 'muted') {\n      setIsMuted(true);\n      if (source === 'passive(mute one)') {\n        message.info('Host muted you');\n      }\n    } else if (action === 'unmuted') {\n      setIsMuted(false);\n      if (source === 'passive') {\n        message.info('Host unmuted you');\n      }\n    }\n  }, []);\n  const onScreenShareClick = useCallback(async () => {\n    if (!isStartedScreenShare && shareRef && shareRef.current) {\n      await mediaStream?.startShareScreen(shareRef.current);\n      setIsStartedScreenShare(true);\n    } else if (isStartedScreenShare) {\n      await mediaStream?.stopShareScreen();\n      setIsStartedScreenShare(false);\n    }\n  }, [mediaStream, isStartedScreenShare, shareRef]);\n  const onPassivelyStopShare = useCallback(({ reason }) => {\n    console.log('passively stop reason:', reason);\n    setIsStartedScreenShare(false);\n  }, []);\n  const onDeviceChange = useCallback(() => {\n    if (mediaStream) {\n      setMicList(mediaStream.getMicList());\n      setSpeakerList(mediaStream.getSpeakerList());\n      setCameraList(mediaStream.getCameraList());\n      setActiveMicrophone(mediaStream.getActiveMicrophone());\n      setActiveSpeaker(mediaStream.getActiveSpeaker());\n      setActiveCamera(mediaStream.getActiveCamera());\n    }\n  }, [mediaStream]);\n  useEffect(() => {\n    zmClient.on('current-audio-change', onHostAudioMuted);\n    zmClient.on('passively-stop-share', onPassivelyStopShare);\n    zmClient.on('device-change', onDeviceChange);\n    return () => {\n      zmClient.off('current-audio-change', onHostAudioMuted);\n      zmClient.off('passively-stop-share', onPassivelyStopShare);\n      zmClient.off('device-change', onDeviceChange);\n    };\n  }, [zmClient, onHostAudioMuted, onPassivelyStopShare, onDeviceChange]);\n  useUnmount(() => {\n    if (isStartedAudio) {\n      mediaStream?.stopAudio();\n    }\n    if (isStartedVideo) {\n      mediaStream?.stopVideo();\n    }\n    if (isStartedScreenShare) {\n      mediaStream?.stopShareScreen();\n    }\n  });\n  return (\n    <div className={classNames('video-footer', className)}>\n      {isAudioEnable && (\n      <MicrophoneButton\n        isStartedAudio={isStartedAudio}\n        isMuted={isMuted}\n        onMicrophoneClick={onMicrophoneClick}\n          onMicrophoneMenuClick={onMicrophoneMenuClick}\n          microphoneList={micList}\n          speakerList={speakerList}\n          activeMicrophone={activeMicrophone}\n          activeSpeaker={activeSpeaker}\n        />\n      )}\n      <CameraButton\n        isStartedVideo={isStartedVideo}\n        onCameraClick={onCameraClick}\n        onSwitchCamera={onSwitchCamera}\n        cameraList={cameraList}\n        activeCamera={activeCamera}\n      />\n      {sharing && (\n        <ScreenShareButton\n          isStartedScreenShare={isStartedScreenShare}\n          onScreenShareClick={onScreenShareClick}\n        />\n      )}\n      {(zmClient.isManager() || zmClient.isHost())&& (\n        <ScreenShareLockButton\n        isLockedScreenShare={isLockedScreenShare}\n        onScreenShareLockClick={()=>{\n          mediaStream?.lockShare(!isLockedScreenShare);\n          setIsLockedScreenShare(!isLockedScreenShare);\n        }}\n      />\n      )}\n    </div>\n  );\n};\nexport default VideoFooter;\n","import React, { useContext, useRef } from 'react';\nimport classnames from 'classnames';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ZoomContext from '../../context/zoom-context';\nimport ZoomMediaContext from '../../context/media-context';\nimport Avatar from './components/avatar';\nimport VideoFooter from './components/video-footer';\nimport Pagination from './components/pagination';\nimport { useCanvasDimension } from './hooks/useCanvasDimension';\nimport { useGalleryLayout } from './hooks/useGalleryLayout';\nimport { usePagination } from './hooks/usePagination';\nimport { useActiveVideo } from './hooks/useAvtiveVideo';\nimport { useShare } from './hooks/useShare';\nimport './video.scss';\nimport { isSupportWebCodecs } from '../../utils/platform';\nimport Chat from \"../chat/chat\";\nimport axios from \"axios\";\nimport { Button } from \"antd\";\nimport styled from 'styled-components';\n\nconst LeaveBtn = styled.button`\n  position: absolute;\n  right: 0;\n  margin-right: 30px;\n  color: red;\n`;\n\nconst VideoContainer: React.FunctionComponent<RouteComponentProps> = (props) => {\n  const zmClient = useContext(ZoomContext);\n  const {\n    mediaStream,\n    video: { decode: isVideoDecodeReady },\n  } = useContext(ZoomMediaContext);\n  const videoRef = useRef<HTMLCanvasElement | null>(null);\n  const shareRef = useRef<HTMLCanvasElement  | null>(null);\n  const selfShareRef = useRef<HTMLCanvasElement & HTMLVideoElement| null>(null);\n  const shareContainerRef = useRef<HTMLDivElement | null>(null);\n  const canvasDimension = useCanvasDimension(mediaStream, videoRef);\n  const activeVideo = useActiveVideo(zmClient);\n  const { page, pageSize, totalPage, totalSize, setPage } = usePagination(\n    zmClient,\n    canvasDimension,\n  );\n  const { visibleParticipants, layout: videoLayout } = useGalleryLayout(\n    zmClient,\n    mediaStream,\n    isVideoDecodeReady,\n    videoRef,\n    canvasDimension,\n    {\n      page,\n      pageSize,\n      totalPage,\n      totalSize,\n    },\n  );\n  const { isRecieveSharing, isStartedShare, sharedContentDimension } = useShare(\n    zmClient,\n    mediaStream,\n    shareRef,\n  );\n  const isSharing = isRecieveSharing || isStartedShare;\n  const contentDimension = sharedContentDimension;\n  if (isSharing && shareContainerRef.current) {\n    const { width, height } = sharedContentDimension;\n    const {\n      width: containerWidth,\n      height: containerHeight,\n    } = shareContainerRef.current.getBoundingClientRect();\n    const ratio = Math.min(containerWidth / width, containerHeight / height, 1);\n    contentDimension.width = Math.floor(width * ratio);\n    contentDimension.height = Math.floor(height * ratio);\n  }\n\n  \n\n  return (\n    <div className=\"viewport\">\n      <div\n        className={classnames('share-container', {\n          'in-sharing': isSharing,\n        })}\n        ref={shareContainerRef}\n      >\n        <div\n          className=\"share-container-viewport\"\n          style={{\n            width: `${contentDimension.width}px`,\n            height: `${contentDimension.height}px`,\n          }}\n        >\n          <canvas\n            className={classnames('share-canvas', { hidden: isStartedShare })}\n            ref={shareRef}\n          />\n          {isSupportWebCodecs()?<video\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />:<canvas\n            className={classnames('share-canvas', { hidden: isRecieveSharing })}\n            ref={selfShareRef}\n          />}\n        </div>\n      </div>\n      <div\n        className={classnames('video-container', {\n          'in-sharing': isSharing,\n        })}\n      >\n        <canvas\n          className=\"video-canvas\"\n          id=\"video-canvas\"\n          width=\"800\"\n          height=\"600\"\n          ref={videoRef}\n        />\n        <ul className=\"avatar-list\">\n          {visibleParticipants.map((user, index) => {\n            if (index > videoLayout.length - 1) {\n              return null;\n            }\n            const dimension = videoLayout[index];\n            const { width, height, x, y } = dimension;\n            const { height: canvasHeight } = canvasDimension;\n            return (\n              <Avatar\n                participant={user}\n                key={user.userId}\n                isActive={activeVideo === user.userId}\n                style={{\n                  width: `${width}px`,\n                  height: `${height}px`,\n                  top: `${canvasHeight - y - height}px`,\n                  left: `${x}px`,\n                }}\n              />\n            );\n          })}\n        </ul>\n      </div>\n      <VideoFooter className=\"video-operations\" sharing shareRef={selfShareRef} />\n      {totalPage > 1 && (\n        <Pagination\n          page={page}\n          totalPage={totalPage}\n          setPage={setPage}\n          inSharing={isSharing}\n        />\n      )}\n      <Chat/>\n    </div>\n  );\n};\n\nexport default VideoContainer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAqCA;AACA;AAvKA;AAqHA;;;AArHA;AAuKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/LA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAFA;AAQA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AA2BA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAYA;AArBA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAxEA;AAAA;AAAA;AAAA;AAAA;AA2EA;AACA;AA9HA;AAUA;;;AAVA;AA+HA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}